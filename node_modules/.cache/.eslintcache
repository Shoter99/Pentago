[{"/home/dawid/Documents/Pentago/src/service-worker.js":"1","/home/dawid/Documents/Pentago/src/index.js":"2","/home/dawid/Documents/Pentago/src/App.js":"3","/home/dawid/Documents/Pentago/src/serviceWorkerRegistration.js":"4","/home/dawid/Documents/Pentago/src/reportWebVitals.js":"5","/home/dawid/Documents/Pentago/src/components/Game.js":"6","/home/dawid/Documents/Pentago/src/components/InBoard.js":"7","/home/dawid/Documents/Pentago/src/components/Place.js":"8"},{"size":2837,"mtime":1666027171182,"results":"9","hashOfConfig":"10"},{"size":816,"mtime":1666027171182,"results":"11","hashOfConfig":"10"},{"size":194,"mtime":1666027171182,"results":"12","hashOfConfig":"10"},{"size":5064,"mtime":1666027171182,"results":"13","hashOfConfig":"10"},{"size":364,"mtime":1666027171182,"results":"14","hashOfConfig":"10"},{"size":9994,"mtime":1666027171182,"results":"15","hashOfConfig":"10"},{"size":499,"mtime":1666027171182,"results":"16","hashOfConfig":"10"},{"size":281,"mtime":1666027171182,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"erd8x6",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},"/home/dawid/Documents/Pentago/src/service-worker.js",[],["45","46","47","48"],[],"/home/dawid/Documents/Pentago/src/index.js",[],[],"/home/dawid/Documents/Pentago/src/App.js",[],[],"/home/dawid/Documents/Pentago/src/serviceWorkerRegistration.js",[],[],"/home/dawid/Documents/Pentago/src/reportWebVitals.js",[],[],"/home/dawid/Documents/Pentago/src/components/Game.js",["49","50","51"],[],"import React, { useState } from 'react'\nimport InBoard from './InBoard';\n\n\n\nconst Game = () => {\n\n    const emptyBoard = [\n        ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n        ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n        ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n        ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n    ]\n\n\n    const [board, setBoard] = useState(emptyBoard)\n    const [turn, setTurn] = useState('white')\n    const [winner, setWinner] = useState('')\n    const [fullBoard, setFullBoard] = useState(false)\n    const [choice, setChoice] = useState(0)\n    const [boardToRotate, setBoardToRotate] = useState(0)\n    const [infoPanelVisible, setInfoPanelVisible] = useState(false)\n    // const [boardToRotateSet, setBoardToRotateSet] = useState(false)\n    const changeColor = (row, col) => {\n        let newBoard = [...board]\n        if (newBoard[row][col] === 'empty' && !winner) {\n            // RotateTurn(newBoard)\n            newBoard[row][col] = turn\n            // setBoard(newBoard)\n            checkForFullBoard()\n            //generate random num 1-4\n            // let randomNum = 1\n            let randomNum = Math.floor(Math.random() * 4)\n            //generate random number 0-1\n            let randomNum2 = Math.random()\n            // let randomNum2 = 1\n            let elem = document.getElementById(`boardnr_` + randomNum)\n    \n            if (randomNum2 > 0.5) {\n                elem.classList.add('animRight')\n                setTimeout(() => {\n                    elem.classList.remove('animRight')\n                    RotateBoard(newBoard, randomNum)\n                }, 950)\n            }\n            else {\n                elem.classList.add('animLeft')\n                setTimeout(() => {\n                    elem.classList.remove('animLeft')\n                    RotateBoardRev(newBoard, randomNum)\n                }, 950)\n            }\n            setTurn(turn === 'white' ? 'black' : 'white')\n        }\n    \n    }\n    const checkForFullBoard = () => {\n        let newBoard = [...board]\n        let isempty = false\n        for (let i = 0; i < newBoard.length; i++) {\n            for (let j = 0; j < newBoard[i].length; j++) {\n                if (newBoard[i][j] === 'empty') {\n                    isempty = true\n                    break\n                }\n            }\n        }\n        if (!isempty) {\n            setFullBoard(true)\n        }\n    }\n    const ResetBoard = () => {\n        setBoard(emptyBoard)\n        setTurn('white')\n        setWinner('')\n        setFullBoard(false)\n    }\n    const checkForWinner = (board) => {\n        var white = 0\n        var black = 0\n        let newBoard = [...board]\n        checkHorizontalPosibility(white, black, newBoard, 1, 0)\n        checkHorizontalPosibility(white, black, newBoard, 0, 1)\n        checkVerticalPosibility(white, black, newBoard, 2, 0, 0)\n        checkVerticalPosibility(white, black, newBoard, 0, 2, 3)\n        checkDiagonally(newBoard)\n    }\n    const checkHorizontalPosibility = (white, black, newBoard, f, s) => {\n        for (let i = 0; i < 4; i += 2) {\n            for (let j = 0; j < 3; j++) {\n                white = 0\n                black = 0\n                if (newBoard[i + f][s + j * 3] === 'white' && newBoard[i + f][1 + s + j * 3] === 'white') {\n                    white += 2\n                }\n                else if (newBoard[i + f][s + j * 3] === 'black' && newBoard[i + f][1 + s + j * 3] === 'black') {\n                    black += 2\n                }\n                else continue\n    \n                for (let k = 0; k < 3; k++) {\n    \n                    if (newBoard[i + s][k + j * 3] === 'white') white++\n                    if (newBoard[i + s][k + j * 3] === 'black') black++\n    \n    \n                }\n                if (white === 5) {\n                    setWinner(() => 'white')\n                    break\n                }\n                if (black === 5) {\n                    setWinner(() => 'black')\n                    break\n    \n    \n                }\n    \n            }\n        }\n    }\n    const checkVerticalPosibility = (white, black, newBoard, f, s, t) => {\n        for (let i = 0; i < 2; i++) {\n            for (let j = 0; j < 3; j++) {\n                white = 0\n                black = 0\n                if (newBoard[i + f][j + t] === 'white' && newBoard[i + f][j + 3 + t] === 'white') {\n                    white += 2\n    \n                }\n                else if (newBoard[i + f][j + t] === 'black' && newBoard[i + f][j + 3 + t] === 'black') {\n                    black += 2\n    \n                }\n                else continue\n                for (let k = 0; k < 3; k++) {\n                    if (newBoard[i + s][j + 3 * k] === 'white') white++\n                    if (newBoard[i + s][j + 3 * k] === 'black') black++\n                }\n                if (white === 5) {\n                    setWinner('white')\n                    break\n                }\n                if (black === 5) {\n                    setWinner('black')\n                    break\n    \n                }\n            }\n        }\n    }\n    const checkDiagonally = (newBoard) => {\n        const checkConditionForColor = color => {\n            if (newBoard[0][1] === color && newBoard[0][5] === color && newBoard[1][6] === color && newBoard[3][1] === color && newBoard[3][5] === color)\n                setWinner(color)\n            else if (newBoard[0][0] === color && newBoard[0][4] === color && newBoard[0][8] === color && newBoard[3][0] === color && newBoard[3][4] === color)\n                setWinner(color)\n            else if (newBoard[0][4] === color && newBoard[0][8] === color && newBoard[3][0] === color && newBoard[3][4] === color && newBoard[3][8] === color)\n                setWinner(color)\n            else if (newBoard[0][3] === color && newBoard[0][7] === color && newBoard[2][2] === color && newBoard[3][3] === color && newBoard[3][7] === color)\n                setWinner(color)\n            else if (newBoard[1][2] === color && newBoard[1][4] === color && newBoard[1][6] === color && newBoard[2][2] === color && newBoard[2][4] === color)\n                setWinner(color)\n            else if (newBoard[1][4] === color && newBoard[1][6] === color && newBoard[2][2] === color && newBoard[2][4] === color && newBoard[2][6] === color)\n                setWinner(color)\n            else if (newBoard[1][1] === color && newBoard[1][3] === color && newBoard[0][8] === color && newBoard[2][1] === color && newBoard[2][3] === color)\n                setWinner(color)\n            else if (newBoard[1][5] === color && newBoard[1][7] === color && newBoard[3][0] === color && newBoard[2][5] === color && newBoard[2][7] === color)\n                setWinner(color)\n        }\n        checkConditionForColor('white')\n        checkConditionForColor('black')\n    }\n    const RotateBoard = (newBoard, num) => {\n        if (winner) return\n        let newBoard2 = []\n        newBoard2.push(newBoard[num][6], newBoard[num][3], newBoard[num][0], newBoard[num][7], newBoard[num][4], newBoard[num][1], newBoard[num][8], newBoard[num][5], newBoard[num][2])\n        newBoard[num] = newBoard2\n        setBoard(newBoard)\n        checkForWinner(newBoard)\n    }\n    const RotateBoardRev = (newBoard, num) => {\n        if (winner) return\n        let newBoard2 = []\n        newBoard2.push(newBoard[num][2], newBoard[num][5], newBoard[num][8], newBoard[num][1], newBoard[num][4], newBoard[num][7], newBoard[num][0], newBoard[num][3], newBoard[num][6])\n        newBoard[num] = newBoard2\n        setBoard(newBoard)\n        checkForWinner(newBoard)\n    }\n    // const RotateTurn = (newBoard) => {\n    \n    //   setBoardToRotate(window.prompt(\"Select board to rotate (1-4)\"))\n    //   while(boardToRotate > 4 && boardToRotate < 0) setBoardToRotate(window.prompt(\"Select board to rotate (1-4)\"))\n    //   setChoice(window.prompt(\"Which board to rotate\\n 1 - clocwise\\n 2 - counterclockwise\"))\n    //   // while(choice >=1 && choice <= 2) setChoice(window.prompt(\"Which board to rotate\\n 1 - clocwise\\n 2 - counterclockwise\"))\n    \n    //   if (choice-1 === 0) {\n    //         // RotateBoard(newBoard, boardIndex)\n    //         // boardNr.classList.add('animRight')\n    \n    //         RotateBoard(newBoard, boardToRotate-1)\n    \n    \n    //   } \n    //   else if (choice-1 === 1) {\n    //         // RotateBoardRev(newBoard, boardIndex)\n    //         // boardNr.classList.add('animLeft')\n    //         RotateBoardRev(newBoard, boardToRotate-1)\n    \n    \n    //   }\n    \n    // }\n    \n\n\n\n    return (\n        <>\n            <h1>Pentago\n                <button onClick={() => { setInfoPanelVisible(false) }} className=\"info-btn\">ⓘ</button>\n            </h1>\n            {infoPanelVisible ? \"\" :\n                (\n                    <div className=\"info-panel\">\n                        <button onClick={() => { setInfoPanelVisible(true) }} className=\"close-panel\">❌</button>\n                        <h3>Tutorial</h3>\n                        <p>Goal of the game:</p>\n                        <p>- Place 5 balls vertically, horizontally or diagonally to win.</p>\n                        <p>- Each round, one of the four smaller boards rotates randomly.</p>\n                    </div>\n                )\n            }\n            {winner ? <><h2>Winner is {winner}</h2> <span className=\"restart\" onClick={() => ResetBoard()} >Restart</span> </> : fullBoard ? <h2 className=\"restart\" onClick={() => ResetBoard()} >Restart</h2> : <h2>Now it's <span style={{ color: '#a4161a' }}>{turn} </span>turn</h2>}\n            <div className=\"board\">\n                {board.map((row, index) => {\n                    return (\n                        <InBoard key={index} board={row} row={index} turn={turn} changeColor={changeColor} choice={choice} />\n                    )\n                })}\n\n            </div>\n        </>\n    )\n}\n\nexport default Game","/home/dawid/Documents/Pentago/src/components/InBoard.js",[],[],"/home/dawid/Documents/Pentago/src/components/Place.js",["52"],[],"import React from 'react'\nimport {useState} from 'react'\nconst Place = ({color, row, col, changeColor}) => {\n    return (\n        <div className={`place ${color}`} onClick={() => changeColor(row, col)}>\n        {/* {row + ' '+ col} */}\n        </div>\n    )\n}\n\nexport default Place\n",{"ruleId":"53","severity":2,"message":"54","line":22,"column":18,"nodeType":"55","messageId":"56","endLine":22,"endColumn":22,"suppressions":"57"},{"ruleId":"53","severity":2,"message":"54","line":53,"column":31,"nodeType":"55","messageId":"56","endLine":53,"endColumn":35,"suppressions":"58"},{"ruleId":"53","severity":2,"message":"54","line":66,"column":1,"nodeType":"55","messageId":"56","endLine":66,"endColumn":5,"suppressions":"59"},{"ruleId":"53","severity":2,"message":"54","line":68,"column":5,"nodeType":"55","messageId":"56","endLine":68,"endColumn":9,"suppressions":"60"},{"ruleId":"61","severity":1,"message":"62","line":20,"column":20,"nodeType":"55","messageId":"63","endLine":20,"endColumn":29},{"ruleId":"61","severity":1,"message":"64","line":21,"column":12,"nodeType":"55","messageId":"63","endLine":21,"endColumn":25},{"ruleId":"61","severity":1,"message":"65","line":21,"column":27,"nodeType":"55","messageId":"63","endLine":21,"endColumn":43},{"ruleId":"61","severity":1,"message":"66","line":2,"column":9,"nodeType":"55","messageId":"63","endLine":2,"endColumn":17},"no-restricted-globals","Unexpected use of 'self'.","Identifier","defaultMessage",["67"],["68"],["69"],["70"],"no-unused-vars","'setChoice' is assigned a value but never used.","unusedVar","'boardToRotate' is assigned a value but never used.","'setBoardToRotate' is assigned a value but never used.","'useState' is defined but never used.",{"kind":"71","justification":"72"},{"kind":"71","justification":"72"},{"kind":"71","justification":"72"},{"kind":"71","justification":"72"},"directive",""]