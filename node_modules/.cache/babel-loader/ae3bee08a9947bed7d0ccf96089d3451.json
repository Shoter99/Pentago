{"ast":null,"code":"var _jsxFileName = \"/home/dawid/Documents/Pentago/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './App.css';\nimport InBoard from './components/InBoard';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [board, setBoard] = useState([['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'], ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'], ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'], ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty']]);\n  const [turn, setTurn] = useState('white');\n  const [winner, setWinner] = useState('');\n  const [fullBoard, setFullBoard] = useState(false);\n  const [choice, setChoice] = useState(0);\n  const [boardToRotate, setBoardToRotate] = useState(0); // const [boardToRotateSet, setBoardToRotateSet] = useState(false)\n\n  const changeColor = (row, col) => {\n    let newBoard = [...board];\n\n    if (newBoard[row][col] === 'empty' && !winner) {\n      // RotateTurn(newBoard)\n      newBoard[row][col] = turn; // setBoard(newBoard)\n\n      checkForFullBoard();\n      checkForWinner(); //generate random num 1-4\n      // let randomNum = 1\n\n      let randomNum = Math.floor(Math.random() * 4); //generate random number 0-1\n\n      let randomNum2 = Math.random(); // let randomNum2 = 1\n\n      let elem = document.getElementById(`boardnr_` + randomNum);\n\n      if (randomNum2 > 0.5) {\n        elem.classList.add('animRight');\n        setTimeout(() => {\n          elem.classList.remove('animRight');\n          RotateBoard(newBoard, randomNum);\n        }, 950);\n      } else {\n        elem.classList.add('animLeft');\n        setTimeout(() => {\n          elem.classList.remove('animLeft');\n          RotateBoardRev(newBoard, randomNum);\n        }, 950);\n      }\n\n      setTurn(turn === 'white' ? 'black' : 'white');\n    }\n  };\n\n  const checkForFullBoard = () => {\n    let newBoard = [...board];\n    let isempty = false;\n\n    for (let i = 0; i < newBoard.length; i++) {\n      for (let j = 0; j < newBoard[i].length; j++) {\n        if (newBoard[i][j] === 'empty') {\n          isempty = true;\n          break;\n        }\n      }\n    }\n\n    if (!isempty) {\n      setFullBoard(true);\n    }\n  };\n\n  const ResetBoard = () => {\n    setBoard([['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'], ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'], ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'], ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty']]);\n    setTurn('white');\n    setWinner('');\n    setFullBoard(false);\n  };\n\n  const checkForWinner = () => {\n    var white = 0;\n    var black = 0;\n    let newBoard = [...board];\n    checkHorizontalPosibility(white, black, newBoard, 1, 0);\n    checkHorizontalPosibility(white, black, newBoard, 0, 1);\n    checkVerticalPosibility(white, black, newBoard, 2, 0, 0);\n    checkVerticalPosibility(white, black, newBoard, 0, 2, 3);\n    checkDiagonally(newBoard);\n  };\n\n  const checkHorizontalPosibility = (white, black, newBoard, f, s) => {\n    for (let i = 0; i < 4; i += 2) {\n      for (let j = 0; j < 3; j++) {\n        white = 0;\n        black = 0;\n\n        if (newBoard[i + f][s + j * 3] === 'white' && newBoard[i + f][1 + s + j * 3] === 'white') {\n          white += 2;\n        } else if (newBoard[i + f][s + j * 3] === 'black' && newBoard[i + f][1 + s + j * 3] === 'black') {\n          black += 2;\n        } else continue;\n\n        for (let k = 0; k < 3; k++) {\n          if (newBoard[i + s][k + j * 3] === 'white') white++;\n          if (newBoard[i + s][k + j * 3] === 'black') black++;\n        }\n\n        if (white === 5) {\n          setWinner('white');\n          break;\n        }\n\n        if (black === 5) {\n          setWinner('black');\n          break;\n        }\n      }\n    }\n  };\n\n  const checkVerticalPosibility = (white, black, newBoard, f, s, t) => {\n    for (let i = 0; i < 2; i++) {\n      for (let j = 0; j < 3; j++) {\n        white = 0;\n        black = 0;\n\n        if (newBoard[i + f][j + t] === 'white' && newBoard[i + f][j + 3 + t] === 'white') {\n          white += 2;\n        } else if (newBoard[i + f][j + t] === 'black' && newBoard[i + f][j + 3 + t] === 'black') {\n          black += 2;\n        } else continue;\n\n        for (let k = 0; k < 3; k++) {\n          if (newBoard[i + s][j + 3 * k] === 'white') white++;\n          if (newBoard[i + s][j + 3 * k] === 'black') black++;\n        }\n\n        if (white === 5) {\n          setWinner('white');\n          break;\n        }\n\n        if (black === 5) {\n          setWinner('black');\n          break;\n        }\n      }\n    }\n  };\n\n  const checkDiagonally = newBoard => {\n    const checkConditionForColor = color => {\n      if (newBoard[0][1] === color && newBoard[0][5] === color && newBoard[1][6] === color && newBoard[3][1] === color && newBoard[3][5] === color) setWinner(color);else if (newBoard[0][0] === color && newBoard[0][4] === color && newBoard[0][8] === color && newBoard[3][0] === color && newBoard[3][4] === color) setWinner(color);else if (newBoard[0][4] === color && newBoard[0][8] === color && newBoard[3][0] === color && newBoard[3][4] === color && newBoard[3][8] === color) setWinner(color);else if (newBoard[0][3] === color && newBoard[0][7] === color && newBoard[2][2] === color && newBoard[3][3] === color && newBoard[3][7] === color) setWinner(color);else if (newBoard[1][2] === color && newBoard[1][4] === color && newBoard[1][6] === color && newBoard[2][2] === color && newBoard[2][4] === color) setWinner(color);else if (newBoard[1][4] === color && newBoard[1][6] === color && newBoard[2][2] === color && newBoard[2][4] === color && newBoard[2][6] === color) setWinner(color);else if (newBoard[1][1] === color && newBoard[1][3] === color && newBoard[0][8] === color && newBoard[2][1] === color && newBoard[2][3] === color) setWinner(color);else if (newBoard[1][5] === color && newBoard[1][7] === color && newBoard[3][0] === color && newBoard[2][5] === color && newBoard[2][7] === color) setWinner(color);\n    };\n\n    checkConditionForColor('white');\n    checkConditionForColor('black');\n  };\n\n  const RotateBoard = (newBoard, num) => {\n    let newBoard2 = [];\n    newBoard2.push(newBoard[num][6], newBoard[num][3], newBoard[num][0], newBoard[num][7], newBoard[num][4], newBoard[num][1], newBoard[num][8], newBoard[num][5], newBoard[num][2]);\n    newBoard[num] = newBoard2;\n    setBoard(newBoard);\n  };\n\n  const RotateBoardRev = (newBoard, num) => {\n    let newBoard2 = [];\n    newBoard2.push(newBoard[num][2], newBoard[num][5], newBoard[num][8], newBoard[num][1], newBoard[num][4], newBoard[num][7], newBoard[num][0], newBoard[num][3], newBoard[num][6]);\n    newBoard[num] = newBoard2;\n    setBoard(newBoard);\n  };\n\n  const RotateTurn = newBoard => {\n    setBoardToRotate(window.prompt(\"Select board to rotate (1-4)\"));\n\n    while (boardToRotate > 4 && boardToRotate < 0) setBoardToRotate(window.prompt(\"Select board to rotate (1-4)\"));\n\n    setChoice(window.prompt(\"Which board to rotate\\n 1 - clocwise\\n 2 - counterclockwise\")); // while(choice >=1 && choice <= 2) setChoice(window.prompt(\"Which board to rotate\\n 1 - clocwise\\n 2 - counterclockwise\"))\n\n    if (choice - 1 === 0) {\n      // RotateBoard(newBoard, boardIndex)\n      // boardNr.classList.add('animRight')\n      RotateBoard(newBoard, boardToRotate - 1);\n    } else if (choice - 1 === 1) {\n      // RotateBoardRev(newBoard, boardIndex)\n      // boardNr.classList.add('animLeft')\n      RotateBoardRev(newBoard, boardToRotate - 1);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Pentago\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), winner ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Winner is \", winner]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 19\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"restart\",\n        onClick: () => ResetBoard(),\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 47\n      }, this), \" \"]\n    }, void 0, true) : fullBoard ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"restart\",\n      onClick: () => ResetBoard(),\n      children: \"Restart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 137\n    }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Now is \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: '#a4161a'\n        },\n        children: [turn, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 217\n      }, this), \"turn\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 206\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: board.map((row, index) => {\n        return /*#__PURE__*/_jsxDEV(InBoard, {\n          board: row,\n          row: index,\n          turn: turn,\n          changeColor: changeColor,\n          choice: choice\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"nSTzaSKWduY5DQXHZIf8/QuJ09s=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/dawid/Documents/Pentago/src/App.js"],"names":["React","InBoard","useState","App","board","setBoard","turn","setTurn","winner","setWinner","fullBoard","setFullBoard","choice","setChoice","boardToRotate","setBoardToRotate","changeColor","row","col","newBoard","checkForFullBoard","checkForWinner","randomNum","Math","floor","random","randomNum2","elem","document","getElementById","classList","add","setTimeout","remove","RotateBoard","RotateBoardRev","isempty","i","length","j","ResetBoard","white","black","checkHorizontalPosibility","checkVerticalPosibility","checkDiagonally","f","s","k","t","checkConditionForColor","color","num","newBoard2","push","RotateTurn","window","prompt","map","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport InBoard from './components/InBoard';\nimport {useState} from 'react';\n\nfunction App() {\n  const [board, setBoard] = useState([\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n  ])\n  const [turn, setTurn] = useState('white')\n  const [winner, setWinner] = useState('')\n  const [fullBoard, setFullBoard] = useState(false)\n  const [choice, setChoice] = useState(0)\n  const [boardToRotate, setBoardToRotate] = useState(0)\n  // const [boardToRotateSet, setBoardToRotateSet] = useState(false)\n  const changeColor =  (row, col) => {\n    let newBoard = [...board]\n    if (newBoard[row][col] === 'empty' && !winner ) {\n      // RotateTurn(newBoard)\n      newBoard[row][col] = turn\n      // setBoard(newBoard)\n      checkForFullBoard()\n      checkForWinner()\n      //generate random num 1-4\n      // let randomNum = 1\n      let randomNum = Math.floor(Math.random() * 4)\n      //generate random number 0-1\n      let randomNum2 = Math.random()\n      // let randomNum2 = 1\n      let elem = document.getElementById(`boardnr_`+randomNum)\n\n      if (randomNum2 > 0.5) {\n        elem.classList.add('animRight')\n        setTimeout(() => {\n          elem.classList.remove('animRight')\n          RotateBoard(newBoard, randomNum)\n      }, 950)\n      }\n      else {\n        elem.classList.add('animLeft')\n        setTimeout(() =>{\n          elem.classList.remove('animLeft')\n          RotateBoardRev(newBoard, randomNum)\n        }, 950)\n      }\n      setTurn(turn === 'white' ? 'black' : 'white')\n    }\n    \n  }\n  const checkForFullBoard = () => {\n    let newBoard = [...board]\n    let isempty = false\n    for (let i = 0; i < newBoard.length; i++) {\n      for (let j = 0; j < newBoard[i].length; j++) {\n        if (newBoard[i][j] === 'empty') {\n          isempty = true\n          break\n        }\n      }\n    }\n    if (!isempty) {\n      setFullBoard(true)\n    }\n  }\n  const ResetBoard = () => {\n    setBoard([\n      ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n      ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n      ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n      ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n    ])\n    setTurn('white')\n    setWinner('')\n    setFullBoard(false)\n  }\n  const checkForWinner = () => {\n    var white = 0\n    var black = 0\n    let newBoard = [...board]\n    checkHorizontalPosibility(white,black,newBoard, 1, 0)\n    checkHorizontalPosibility(white,black,newBoard, 0, 1)\n    checkVerticalPosibility(white,black,newBoard, 2, 0, 0)\n    checkVerticalPosibility(white,black,newBoard, 0, 2, 3)\n    checkDiagonally(newBoard)\n    }\nconst checkHorizontalPosibility = (white, black, newBoard, f, s) => {\n  for (let i = 0; i < 4; i+=2) {\n    for (let j = 0; j < 3; j++) {\n      white = 0\n      black = 0\n      if(newBoard[i+f][s+j*3] === 'white' && newBoard[i+f][1+s+j*3] === 'white') {\n        white+=2\n      }\n      else if(newBoard[i+f][s+j*3] === 'black' && newBoard[i+f][1+s+j*3] === 'black')\n      {\n        black+=2\n      }\n      else continue\n\n      for (let k = 0; k < 3; k++) {\n        \n        if (newBoard[i+s][k+j*3] === 'white') white++\n        if (newBoard[i+s][k+j*3] === 'black') black++\n        \n\n      }\n      if(white === 5) {\n        setWinner('white')\n        break}\n      if(black === 5){\n        setWinner('black')\n        break\n      \n      \n    }\n    \n    }}\n}\nconst checkVerticalPosibility = (white, black, newBoard, f, s, t) => {\n  for (let i = 0; i < 2; i++) {\n    for (let j = 0; j < 3; j++){\n      white = 0\n      black = 0\n      if(newBoard[i+f][j+t] === 'white' && newBoard[i+f][j+3+t] === 'white'){\n        white+=2\n\n      }\n      else if(newBoard[i+f][j+t] === 'black' && newBoard[i+f][j+3+t] === 'black'){\n        black+=2\n\n      }\n      else continue\n      for (let k = 0; k < 3; k++){\n        if(newBoard[i+s][j+3*k] === 'white') white++\n        if(newBoard[i+s][j+3*k] === 'black') black++\n      }\n      if(white === 5) {\n        setWinner('white')\n        break}\n      if(black === 5){\n        setWinner('black')\n        break\n\n    }\n  }\n}}\nconst checkDiagonally = (newBoard) => {\n  const checkConditionForColor = color =>{\n    if (newBoard[0][1] === color && newBoard[0][5] === color && newBoard[1][6] === color && newBoard[3][1] === color && newBoard[3][5] === color)\n    setWinner(color)\n    else if (newBoard[0][0] === color && newBoard[0][4] === color && newBoard[0][8] === color && newBoard[3][0] === color && newBoard[3][4] === color)\n    setWinner(color)\n    else if (newBoard[0][4] === color && newBoard[0][8] === color && newBoard[3][0] === color && newBoard[3][4] === color && newBoard[3][8] === color )\n    setWinner(color)\n    else if(newBoard[0][3] === color && newBoard[0][7] === color && newBoard[2][2] === color && newBoard[3][3] === color && newBoard[3][7] === color)\n    setWinner(color)\n    else if (newBoard[1][2] === color && newBoard[1][4] === color && newBoard[1][6] === color && newBoard[2][2] === color && newBoard[2][4] === color)\n    setWinner(color)\n    else if (newBoard[1][4] === color && newBoard[1][6] === color && newBoard[2][2] === color && newBoard[2][4] === color && newBoard[2][6] === color)\n    setWinner(color)\n    else if (newBoard[1][1] === color && newBoard[1][3] === color && newBoard[0][8] === color && newBoard[2][1] === color && newBoard[2][3] === color )\n    setWinner(color)\n    else if(newBoard[1][5] === color && newBoard[1][7] === color && newBoard[3][0] === color && newBoard[2][5] === color && newBoard[2][7] === color)\n    setWinner(color)\n  }\n  checkConditionForColor('white')\n  checkConditionForColor('black')\n}\nconst RotateBoard = (newBoard, num) => {\n  let newBoard2 = []\n  newBoard2.push(newBoard[num][6], newBoard[num][3], newBoard[num][0], newBoard[num][7], newBoard[num][4], newBoard[num][1], newBoard[num][8], newBoard[num][5], newBoard[num][2])\n  newBoard[num] = newBoard2\n  setBoard(newBoard)\n}\nconst RotateBoardRev = (newBoard, num) => {\n  let newBoard2 = []\n  newBoard2.push(newBoard[num][2], newBoard[num][5], newBoard[num][8], newBoard[num][1], newBoard[num][4], newBoard[num][7], newBoard[num][0], newBoard[num][3], newBoard[num][6])\n  newBoard[num] = newBoard2\n  setBoard(newBoard)\n}\nconst RotateTurn = (newBoard) => {\n  \n  setBoardToRotate(window.prompt(\"Select board to rotate (1-4)\"))\n  while(boardToRotate > 4 && boardToRotate < 0) setBoardToRotate(window.prompt(\"Select board to rotate (1-4)\"))\n  setChoice(window.prompt(\"Which board to rotate\\n 1 - clocwise\\n 2 - counterclockwise\"))\n  // while(choice >=1 && choice <= 2) setChoice(window.prompt(\"Which board to rotate\\n 1 - clocwise\\n 2 - counterclockwise\"))\n\n  if (choice-1 === 0) {\n        // RotateBoard(newBoard, boardIndex)\n        // boardNr.classList.add('animRight')\n        \n        RotateBoard(newBoard, boardToRotate-1)\n      \n      \n  } \n  else if (choice-1 === 1) {\n        // RotateBoardRev(newBoard, boardIndex)\n        // boardNr.classList.add('animLeft')\n        RotateBoardRev(newBoard, boardToRotate-1)\n        \n      \n  }\n\n}\n\n\n  return (\n    <div className=\"App\">\n      <h1>Pentago</h1>\n      \n      {winner ? <><h2>Winner is {winner}</h2> <span className=\"restart\"  onClick={() => ResetBoard()} >Restart</span> </> : fullBoard ? <h2 className=\"restart\"  onClick={() => ResetBoard()} >Restart</h2> :<h2>Now is <span style={{color:'#a4161a'}}>{turn} </span>turn</h2>}\n      <div className=\"board\">\n        {board.map((row, index) => {\n          return (\n            <InBoard key={index}  board={row} row={index} turn={turn} changeColor={changeColor} choice={choice} />\n            )})}\n\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}